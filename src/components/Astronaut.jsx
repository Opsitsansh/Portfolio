/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: wallmasterr (https://sketchfab.com/wallmasterr)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/tenhun-falling-spaceman-fanart-9fd80b6a259f41fd99e6f56eee686dc5
Title: Tenhun Falling spaceman (FanArt)
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'

export function Astronaut(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/models/tenhun_falling_spaceman_fanart.glb')
  const { actions } = useAnimations(animations, group);
  
  // Animation state
  const animationState = useRef({
    targetY: 0.5,
    targetX: 0.8,
    currentY: 5,
    currentX: 0,
    velocityY: 0,
    velocityX: 0,
    damping: 0.15,
    stiffness: 0.02
  });
  
  useEffect(() => {
    if (animations && animations.length > 0 && actions) {
      const firstAnimation = animations[0];
      if (firstAnimation && actions[firstAnimation.name]) {
        const action = actions[firstAnimation.name];
        action.play();
        action.setLoop(THREE.LoopRepeat);
      }
    }
  }, [actions, animations]);
  
  // Spring animation using useFrame
  useFrame((state, delta) => {
    if (group.current) {
      const animState = animationState.current;
      
      // Y animation with frame-rate independent movement
      const forceY = (animState.targetY - animState.currentY) * animState.stiffness;
      animState.velocityY = (animState.velocityY + forceY) * animState.damping;
      animState.currentY += animState.velocityY * delta * 60;
      
      // X animation with frame-rate independent movement
      const forceX = (animState.targetX - animState.currentX) * animState.stiffness;
      animState.velocityX = (animState.velocityX + forceX) * animState.damping;
      animState.currentX += animState.velocityX * delta * 60;
      
      // Update the position
      const basePosition = props.position || [1.3, -1, 0];
      group.current.position.set(
        basePosition[0] + animState.currentX, 
        basePosition[1] + animState.currentY, 
        basePosition[2]
      );
    }
  });
  
  return (
    <group 
      ref={group} 
      {...props} 
      dispose={null} 
      rotation={[-Math.PI / 2, -0.2, 2.2]} 
      scale={[props.scale || 0.3, props.scale || 0.3, props.scale || 0.3]}
    >
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model">
          <group name="Root">
            <group name="metarig">
              <primitive object={nodes.metarig_rootJoint} />
              <skinnedMesh
                name="Cube001_0"
                geometry={nodes.Cube001_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube001_0.skeleton}
              />
              <skinnedMesh
                name="Cube005_0"
                geometry={nodes.Cube005_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube005_0.skeleton}
              />
              <skinnedMesh
                name="Cube002_0"
                geometry={nodes.Cube002_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube002_0.skeleton}
              />
              <skinnedMesh
                name="Plane_0"
                geometry={nodes.Plane_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Plane_0.skeleton}
              />
              <skinnedMesh
                name="Cube008_0"
                geometry={nodes.Cube008_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube008_0.skeleton}
              />
              <skinnedMesh
                name="Cube004_0"
                geometry={nodes.Cube004_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube004_0.skeleton}
              />
              <skinnedMesh
                name="Cube003_0"
                geometry={nodes.Cube003_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube003_0.skeleton}
              />
              <skinnedMesh
                name="Cube_0"
                geometry={nodes.Cube_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube_0.skeleton}
              />
              <skinnedMesh
                name="Cube009_0"
                geometry={nodes.Cube009_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube009_0.skeleton}
              />
              <skinnedMesh
                name="Cube011_0"
                geometry={nodes.Cube011_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube011_0.skeleton}
              />
              <group name="Cube001" />
              <group name="Cube005" />
              <group name="Cube002" />
              <group name="Plane" />
              <group name="Cube008" />
              <group name="Cube004" />
              <group name="Cube003" />
              <group name="Cube" />
              <group name="Cube009" rotation={[-2.708, 0.013, -1.447]} scale={1.307} />
              <group name="Cube011" />
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/tenhun_falling_spaceman_fanart.glb')